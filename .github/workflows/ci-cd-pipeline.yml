name: Dating App CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: best-koder-ever/dating-app

jobs:
  # ===== .NET MICROSERVICES =====
  dotnet-tests:
    name: .NET Services Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, user-service, matchmaking-service, swipe-service, photo-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: |
        case "${{ matrix.service }}" in
          "auth-service")
            dotnet restore ${{ matrix.service }}/auth-service.sln
            ;;
          "user-service")
            dotnet restore ${{ matrix.service }}/UserService.csproj
            ;;
          "matchmaking-service")
            dotnet restore ${{ matrix.service }}/matchmaking-service.sln
            ;;
          "swipe-service")
            dotnet restore ${{ matrix.service }}/swipe-service.sln
            ;;
          "photo-service")
            dotnet restore ${{ matrix.service }}/PhotoService.csproj
            ;;
        esac
    
    - name: Build
      run: |
        case "${{ matrix.service }}" in
          "auth-service")
            dotnet build ${{ matrix.service }}/auth-service.sln --no-restore
            ;;
          "user-service")
            dotnet build ${{ matrix.service }}/UserService.csproj --no-restore
            ;;
          "matchmaking-service")
            dotnet build ${{ matrix.service }}/matchmaking-service.sln --no-restore
            ;;
          "swipe-service")
            dotnet build ${{ matrix.service }}/swipe-service.sln --no-restore
            ;;
          "photo-service")
            dotnet build ${{ matrix.service }}/PhotoService.csproj --no-restore
            ;;
        esac
    
    - name: Run tests
      run: |
        case "${{ matrix.service }}" in
          "auth-service")
            if dotnet test ${{ matrix.service }}/auth-service.sln --list-tests > /dev/null 2>&1; then
              dotnet test ${{ matrix.service }}/auth-service.sln --no-build --verbosity normal --collect:"XPlat Code Coverage"
            else
              echo "No tests found for auth-service, skipping..."
            fi
            ;;
          "user-service")
            if dotnet test ${{ matrix.service }}/UserService.csproj --list-tests > /dev/null 2>&1; then
              dotnet test ${{ matrix.service }}/UserService.csproj --no-build --verbosity normal --collect:"XPlat Code Coverage"
            else
              echo "No tests found for user-service, skipping..."
            fi
            ;;
          "matchmaking-service")
            if dotnet test ${{ matrix.service }}/matchmaking-service.sln --list-tests > /dev/null 2>&1; then
              dotnet test ${{ matrix.service }}/matchmaking-service.sln --no-build --verbosity normal --collect:"XPlat Code Coverage"
            else
              echo "No tests found for matchmaking-service, skipping..."
            fi
            ;;
          "swipe-service")
            if dotnet test ${{ matrix.service }}/swipe-service.sln --list-tests > /dev/null 2>&1; then
              dotnet test ${{ matrix.service }}/swipe-service.sln --no-build --verbosity normal --collect:"XPlat Code Coverage"
            else
              echo "No tests found for swipe-service, skipping..."
            fi
            ;;
          "photo-service")
            if dotnet test ${{ matrix.service }}/PhotoService.csproj --list-tests > /dev/null 2>&1; then
              dotnet test ${{ matrix.service }}/PhotoService.csproj --no-build --verbosity normal --collect:"XPlat Code Coverage"
            else
              echo "No tests found for photo-service, skipping..."
            fi
            ;;
        esac
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: ./${{ matrix.service }}/**/coverage.cobertura.xml
        flags: ${{ matrix.service }}

  # ===== DOCKER BUILD & PUSH =====
  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [dotnet-tests]
    strategy:
      matrix:
        service: [auth-service, user-service, matchmaking-service, swipe-service, photo-service, dejting-yarp]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # ===== INTEGRATION TESTS =====
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [dotnet-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Run integration tests
      run: |
        echo "Running basic integration tests..."
        # Test basic service compilation
        for service in auth-service user-service matchmaking-service swipe-service photo-service; do
          echo "Testing $service compilation..."
          case "$service" in
            "auth-service")
              dotnet build $service/auth-service.sln --verbosity minimal
              ;;
            "user-service")
              dotnet build $service/UserService.csproj --verbosity minimal
              ;;
            "matchmaking-service")
              dotnet build $service/matchmaking-service.sln --verbosity minimal
              ;;
            "swipe-service")
              dotnet build $service/swipe-service.sln --verbosity minimal
              ;;
            "photo-service")
              dotnet build $service/PhotoService.csproj --verbosity minimal
              ;;
          esac
        done

  # ===== DEPLOYMENT =====
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      run: |
        echo "Deploying to production server..."
        # Add your deployment commands here
        # e.g., SSH to server, pull latest images, restart services
