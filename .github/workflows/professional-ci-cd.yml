name: Professional Dating App CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: best-koder-ever/dating-app
  DOTNET_VERSION: "8.0.x"

jobs:
  # ===== FAST FEEDBACK LOOP =====
  quick-validation:
    name: Quick Validation (< 3 min)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, user-service, matchmaking-service, swipe-service, photo-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore & Build
      run: |
        case "${{ matrix.service }}" in
          "auth-service") PROJECT="AuthService.csproj" ;;
          "user-service") PROJECT="UserService.csproj" ;;
          "matchmaking-service") PROJECT="MatchmakingService.csproj" ;;
          "swipe-service") PROJECT="swipe-service.csproj" ;;
          "photo-service") PROJECT="PhotoService.csproj" ;;
        esac
        
        cd ${{ matrix.service }}
        dotnet restore $PROJECT
        dotnet build $PROJECT --no-restore
        
        # Run unit tests if they exist
        if [ -d "Tests" ] || [ -d "*Tests" ]; then
          find . -name "*Tests.csproj" -exec dotnet test {} \;
        fi

  # ===== SECURITY & QUALITY (Runs in parallel) =====
  security-scan:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: .NET Security Scan
      run: |
        dotnet list package --vulnerable --include-transitive || true
        
    - name: Code Quality Check
      run: |
        # Check for common issues
        grep -r "TODO\|FIXME\|HACK" . --exclude-dir=.git || true
        echo "‚úÖ Code quality check completed"

  # ===== INTEGRATION TESTS (Only on main/develop) =====
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quick-validation]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: datingapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Generate Test Data
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=datingapp_test;Username=testuser;Password=testpassword"
      run: |
        cd TestDataGenerator
        dotnet run -- --users 10 --quick-mode 2>/dev/null || echo "Test data generation skipped"

    - name: Integration Test
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=datingapp_test;Username=testuser;Password=testpassword"
      run: |
        echo "üß™ Running integration tests..."
        
        # Start auth service for basic API testing
        cd auth-service
        timeout 30s dotnet run --urls="http://localhost:8081" &
        sleep 10
        
        # Basic health check
        curl -f http://localhost:8081/health || echo "‚ö†Ô∏è Auth service health check failed"
        
        # Test basic registration
        curl -X POST http://localhost:8081/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"ci-test@example.com","password":"Test123!","name":"CI Test"}' \
          || echo "‚ö†Ô∏è Registration test failed"

  # ===== DOCKER BUILD (Only on success) =====
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quick-validation, security-scan]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [auth-service, user-service, matchmaking-service, swipe-service, photo-service]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest

  # ===== DEPLOYMENT =====
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Production
      run: |
        echo "üöÄ Ready for production deployment"
        echo "‚úÖ All validations passed"
        echo "üì¶ Docker images built and pushed"
        echo "üîí Security scans completed"
        
        # Add your actual deployment commands here
        echo "üí° Next: Add real deployment automation"
