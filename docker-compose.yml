version: '3.8'

services:
  yarp:
    image: yarp:latest
    build:
      context: ./dejting-yarp
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - user-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8080
      - ASPNETCORE_URLS=http://*:8080     
    networks:
      - app-network

  auth-service:
    image: auth-service:latest  
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8081
      - ASPNETCORE_HTTPS_PORTS=8081
      - ASPNETCORE_URLS=http://*:8081
      - ConnectionStrings__DefaultConnection=Server=auth-service-db;Port=3306;Database=AuthServiceDb;User=authuser;Password=authuser_password;
    depends_on:
      auth-service-db:
        condition: service_healthy
    networks:
      - app-network

  auth-service-db:
    image: mysql:8.0
    container_name: auth-service-db
    restart: always    
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: AuthServiceDb
      MYSQL_USER: authuser
      MYSQL_PASSWORD: authuser_password
    ports:
      - "3307:3306"
    volumes:
      - auth-service-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "auth-service-db"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    image: user-service:latest
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8082
      - ASPNETCORE_HTTPS_PORTS=8082
      - ASPNETCORE_URLS=http://*:8082
      - ConnectionStrings__DefaultConnection=Server=user-service-db;Port=3306;Database=UserServiceDb;User=userservice_user;Password=userservice_user_password;  
    depends_on:
      - user-service-db
    networks:
      - app-network

  user-service-db:
    image: mysql:8.0
    container_name: user-service-db
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: UserServiceDb
      MYSQL_USER: userservice_user
      MYSQL_PASSWORD: userservice_user_password
    ports:
      - "3308:3306"
    volumes:
      - user-service-data:/var/lib/mysql
    networks:
      - app-network  
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "user-service-db"]
      interval: 10s
      timeout: 5s
      retries: 5      

  matchmaking-service:
    image: matchmaking-service:latest
    build:
      context: ./matchmaking-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8083
      - ASPNETCORE_HTTPS_PORTS=8083
      - ASPNETCORE_URLS=http://*:8083
      - ConnectionStrings__DefaultConnection=Server=matchmaking-service-db;Port=3306;Database=MatchmakingServiceDb;User=matchmakingservice_user;Password=matchmaking_user_password;  
    depends_on:
      - matchmaking-service-db
    networks:
      - app-network

  matchmaking-service-db:
    image: mysql:8.0
    container_name: matchmaking-service-db
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: MatchmakingServiceDb
      MYSQL_USER: matchmakingservice_user
      MYSQL_PASSWORD: matchmakingservice_user_password
    ports:
      - "3309:3306"
    volumes:
      - matchmaking-service-data:/var/lib/mysql
    networks:
      - app-network  
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "matchmaking-service-db"]
      interval: 10s
      timeout: 5s
      retries: 5     


  seq:
    image: datalust/seq:latest
    ports:
      - "5341:80"
    environment:
      ACCEPT_EULA: Y
    volumes:
      - seq-data:/data
    networks:
      - app-network

  loki:
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/tmp/loki
    networks:
      - app-network
    user: "root"


  promtail:
    image: grafana/promtail:2.4.1
    volumes:
      - /var/log:/var/log
      - ./config/promtail-config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - app-network

volumes:
  loki-data:
  auth-service-data:
  user-service-data:
  matchmaking-service-data:
  seq-data:
  grafana-storage:

networks:
  app-network:
    driver: bridge